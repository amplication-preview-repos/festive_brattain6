/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AttendanceHistoryService } from "../attendanceHistory.service";
import { AttendanceHistoryCreateInput } from "./AttendanceHistoryCreateInput";
import { AttendanceHistory } from "./AttendanceHistory";
import { AttendanceHistoryFindManyArgs } from "./AttendanceHistoryFindManyArgs";
import { AttendanceHistoryWhereUniqueInput } from "./AttendanceHistoryWhereUniqueInput";
import { AttendanceHistoryUpdateInput } from "./AttendanceHistoryUpdateInput";

export class AttendanceHistoryControllerBase {
  constructor(protected readonly service: AttendanceHistoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AttendanceHistory })
  async createAttendanceHistory(
    @common.Body() data: AttendanceHistoryCreateInput
  ): Promise<AttendanceHistory> {
    return await this.service.createAttendanceHistory({
      data: {
        ...data,

        teacher: data.teacher
          ? {
              connect: data.teacher,
            }
          : undefined,
      },
      select: {
        checkIn: true,
        checkOut: true,
        createdAt: true,
        date: true,
        id: true,
        status: true,

        teacher: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AttendanceHistory] })
  @ApiNestedQuery(AttendanceHistoryFindManyArgs)
  async attendanceHistories(
    @common.Req() request: Request
  ): Promise<AttendanceHistory[]> {
    const args = plainToClass(AttendanceHistoryFindManyArgs, request.query);
    return this.service.attendanceHistories({
      ...args,
      select: {
        checkIn: true,
        checkOut: true,
        createdAt: true,
        date: true,
        id: true,
        status: true,

        teacher: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AttendanceHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async attendanceHistory(
    @common.Param() params: AttendanceHistoryWhereUniqueInput
  ): Promise<AttendanceHistory | null> {
    const result = await this.service.attendanceHistory({
      where: params,
      select: {
        checkIn: true,
        checkOut: true,
        createdAt: true,
        date: true,
        id: true,
        status: true,

        teacher: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AttendanceHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAttendanceHistory(
    @common.Param() params: AttendanceHistoryWhereUniqueInput,
    @common.Body() data: AttendanceHistoryUpdateInput
  ): Promise<AttendanceHistory | null> {
    try {
      return await this.service.updateAttendanceHistory({
        where: params,
        data: {
          ...data,

          teacher: data.teacher
            ? {
                connect: data.teacher,
              }
            : undefined,
        },
        select: {
          checkIn: true,
          checkOut: true,
          createdAt: true,
          date: true,
          id: true,
          status: true,

          teacher: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AttendanceHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAttendanceHistory(
    @common.Param() params: AttendanceHistoryWhereUniqueInput
  ): Promise<AttendanceHistory | null> {
    try {
      return await this.service.deleteAttendanceHistory({
        where: params,
        select: {
          checkIn: true,
          checkOut: true,
          createdAt: true,
          date: true,
          id: true,
          status: true,

          teacher: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
