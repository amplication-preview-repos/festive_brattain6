/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AttendanceHistory } from "./AttendanceHistory";
import { AttendanceHistoryCountArgs } from "./AttendanceHistoryCountArgs";
import { AttendanceHistoryFindManyArgs } from "./AttendanceHistoryFindManyArgs";
import { AttendanceHistoryFindUniqueArgs } from "./AttendanceHistoryFindUniqueArgs";
import { CreateAttendanceHistoryArgs } from "./CreateAttendanceHistoryArgs";
import { UpdateAttendanceHistoryArgs } from "./UpdateAttendanceHistoryArgs";
import { DeleteAttendanceHistoryArgs } from "./DeleteAttendanceHistoryArgs";
import { Teacher } from "../../teacher/base/Teacher";
import { AttendanceHistoryService } from "../attendanceHistory.service";
@graphql.Resolver(() => AttendanceHistory)
export class AttendanceHistoryResolverBase {
  constructor(protected readonly service: AttendanceHistoryService) {}

  async _attendanceHistoriesMeta(
    @graphql.Args() args: AttendanceHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AttendanceHistory])
  async attendanceHistories(
    @graphql.Args() args: AttendanceHistoryFindManyArgs
  ): Promise<AttendanceHistory[]> {
    return this.service.attendanceHistories(args);
  }

  @graphql.Query(() => AttendanceHistory, { nullable: true })
  async attendanceHistory(
    @graphql.Args() args: AttendanceHistoryFindUniqueArgs
  ): Promise<AttendanceHistory | null> {
    const result = await this.service.attendanceHistory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AttendanceHistory)
  async createAttendanceHistory(
    @graphql.Args() args: CreateAttendanceHistoryArgs
  ): Promise<AttendanceHistory> {
    return await this.service.createAttendanceHistory({
      ...args,
      data: {
        ...args.data,

        teacher: args.data.teacher
          ? {
              connect: args.data.teacher,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => AttendanceHistory)
  async updateAttendanceHistory(
    @graphql.Args() args: UpdateAttendanceHistoryArgs
  ): Promise<AttendanceHistory | null> {
    try {
      return await this.service.updateAttendanceHistory({
        ...args,
        data: {
          ...args.data,

          teacher: args.data.teacher
            ? {
                connect: args.data.teacher,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AttendanceHistory)
  async deleteAttendanceHistory(
    @graphql.Args() args: DeleteAttendanceHistoryArgs
  ): Promise<AttendanceHistory | null> {
    try {
      return await this.service.deleteAttendanceHistory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Teacher, {
    nullable: true,
    name: "teacher",
  })
  async getTeacher(
    @graphql.Parent() parent: AttendanceHistory
  ): Promise<Teacher | null> {
    const result = await this.service.getTeacher(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
